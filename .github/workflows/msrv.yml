name: MSRV

on:
  workflow_call:
    inputs:
      # Basic inputs
      target:
        type: string
        required: true
      exclude:
        type: string
        required: false
        default: ""
      dependencies:
        type: string
        required: false
        default: ""
      env:
        type: string
        required: false
        default: ""
      # Advanced inputs
      names:
        type: string
        required: false
        default: >
          {
            "x86_64-pc-windows-msvc":     "Windows x64",
            "aarch64-pc-windows-msvc":    "Windows ARM64",

            "x86_64-apple-darwin":        "macOS x64",
            "aarch64-apple-darwin":       "macOS ARM64",

            "x86_64-unknown-linux-gnu":   "Linux x64",
            "aarch64-unknown-linux-gnu":  "Linux ARM64",

            "x86_64-linux-android":       "Android x64",
            "aarch64-linux-android":      "Android ARM64",
            "armv7-linux-androideabi":    "Android ARMv7",

            "x86_64-apple-ios":           "iOS x64",
            "aarch64-apple-ios":          "iOS ARM64",

            "wasm32-unknown-unknown":     "Wasm"
          }
      oses:
        type: string
        required: false
        default: >
          {
            "x86_64-pc-windows-msvc":     "windows-2022",
            "aarch64-pc-windows-msvc":    "windows-2022",

            "x86_64-apple-darwin":        "macos-14",
            "aarch64-apple-darwin":       "macos-14",

            "x86_64-unknown-linux-gnu":   "ubuntu-24.04",
            "aarch64-unknown-linux-gnu":  "ubuntu-24.04",

            "x86_64-linux-android":       "ubuntu-24.04",
            "aarch64-linux-android":      "ubuntu-24.04",
            "armv7-linux-androideabi":    "ubuntu-24.04",

            "x86_64-apple-ios":           "macos-14",
            "aarch64-apple-ios":          "macos-14",

            "wasm32-unknown-unknown":     "ubuntu-24.04"
          }

jobs:
  msrv:
    name: ${{ fromJson(inputs.names)[inputs.target] }}
    runs-on: ${{ fromJson(inputs.oses)[inputs.target] }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Process inputs
        if: inputs.env != '' || inputs.exclude != ''
        uses: xStrom/ci-test/inputs@main
        with:
          env: ${{ inputs.env }}
          exclude: ${{ inputs.exclude }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check presence
        id: presence
        uses: xStrom/ci-test/presence@main

      - name: Get configuration
        id: config
        uses: xStrom/ci-test/config@main
        with:
          rust-msrv: "true"

      - name: Install Rust ${{ steps.config.outputs.rust-msrv }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.config.outputs.rust-msrv }}
          targets: ${{ inputs.target }}

      - name: Install cargo-hack
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack@0.6.32

      - name: Install additional dependencies
        if: inputs.dependencies != ''
        run: |
          # Install additional dependencies
          ${{ inputs.dependencies }}

      - name: Restore cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ inputs.target }}
          save-if: ${{ github.event_name != 'merge_group' }}

      - name: Run cargo check
        run: cargo hack check --workspace --ignore-private $EXCLUDE_ARGS --locked --profile ci --target ${{ inputs.target }} --optional-deps --each-feature

      - name: Run cargo check (no debug_assertions)
        if: steps.presence.outputs.debug-assertions == 'true'
        env:
          CARGO_PROFILE_CI_DEBUG_ASSERTIONS: "false"
        run: cargo hack check --workspace --ignore-private $EXCLUDE_ARGS --locked --profile ci --target ${{ inputs.target }} --optional-deps --each-feature
