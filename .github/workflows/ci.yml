env:
  # Whether the workspace contains Rust code using the debug_assertions configuration option.
  USING_DEBUG_ASSERTIONS: "true"

name: CI

on:
  pull_request:
  merge_group:
  # We run on push, even though the commit is the same as when we ran in merge_group.
  # This allows the cache to be primed.
  # See https://github.com/orgs/community/discussions/66430
  push:
    branches:
      - main

jobs:
  config:
    name: Configuration
    runs-on: ubuntu-latest
    outputs:
      remote-version: main
      name-clippy: cargo clippy
      target-names: '{ "x86_64-unknown-linux-gnu": "Linux", "x86_64-pc-windows-msvc": "Windows" }'
      target-oses: '{ "x86_64-unknown-linux-gnu": "ubuntu-latest", "x86_64-pc-windows-msvc": "windows-latest" }'
    steps:
      - name: Foo
        run: echo Foo

  local-fmt:
    name: local fmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.83
          components: rustfmt

      - name: Run cargo fmt
        run: cargo fmt --all --check

  remote-fmt:
    name: Formatting
    uses: xStrom/ci-test/.github/workflows/formatting.yml@main

  remote-clippy:
    name: ${{ needs.config.outputs.name-clippy }}
    needs: config
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-msvc]
    uses: xStrom/ci-test/.github/workflows/proxy.yml@main
    with:
      name: ${{ fromJson(needs.config.outputs.target-names)[matrix.target] }}
      os: ${{ fromJson(needs.config.outputs.target-oses)[matrix.target] }}
      target: ${{ matrix.target }}
