env:
  # List of packages that can not target Wasm.
  EXCLUDE_PKGS_WASM: test_no_wasm test_no_wasm_2

name: CI

on:
  pull_request:
  merge_group:
  # We run on push, even though the commit is the same as when we ran in merge_group.
  # This allows the cache to be primed.
  # See https://github.com/orgs/community/discussions/66430
  push:
    branches:
      - main

jobs:
  local-fmt:
    name: Local
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine Rust versions
        id: versions
        uses: xStrom/ci-test/versions@main

      - name: Install Rust ${{ steps.versions.outputs.rust-stable }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.versions.outputs.rust-stable }}
          components: rustfmt

      - name: Run cargo fmt
        run: cargo fmt --all --check

  config:
    name: Configuration
    runs-on: ubuntu-latest
    outputs:
      exclude: >
        {
          "wasm32-unknown-unknown": "${{ env.EXCLUDE_PKGS_WASM }}"
        }
      lfs-key: ${{ steps.lfs.outputs.key }}
    steps:
      - name: Provide configuration
        run: |
          # Provide configuration
          echo "Providing configuration .."

      - name: Generate LFS cache key
        id: lfs
        run: |
          echo 'key=${{ hashFiles('test/*.toml') }}' | tee -a $GITHUB_OUTPUT

  formatting:
    name: ${{ fromJson('''Check''') }}
    uses: xStrom/ci-test/.github/workflows/formatting.yml@main
    with:
      taplo: true
      rdme-projects: test
      copyright-config: >
        [
          {
            "name":    "CI's \\n \"cool\" .^$*+?()[{\\| $?",
            "license": "Apache-2.0 OR MIT",
            "globs":   ["*.rs", "!with space/"]
          },
          {
            "name":    "Cool",
            "license": "BSD",
            "globs":   ["with space/**/*.rs"]
          }
        ]

  typos:
    name: ${{ fromJson('''Check''') }}
    uses: xStrom/ci-test/.github/workflows/typos.yml@main

  clippy:
    name: ${{ fromJson('''Clippy''') }}
    needs: config
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-pc-windows-msvc, aarch64-apple-darwin, x86_64-unknown-linux-gnu, wasm32-unknown-unknown]
    uses: xStrom/ci-test/.github/workflows/clippy.yml@main
    with:
      target: ${{ matrix.target }}
      exclude: ${{ fromJson(needs.config.outputs.exclude)[matrix.target] }}
      dependencies: |
        ${{ matrix.target == 'x86_64-unknown-linux-gnu' && '
          sudo apt-get install --no-install-recommends libasound2-dev libudev-dev
        '}}

  # android:
  #   name: ${{ fromJson('''Android''') }}
  #   strategy:
  #     matrix:
  #       target: [aarch64-linux-android]
  #   uses: xStrom/ci-test/.github/workflows/android.yml@main
  #   with:
  #     target: ${{ matrix.target }}
  #     packages: -p test

  prime-lfs-cache:
    name: Prime LFS cache
    needs: config
    uses: xStrom/ci-test/.github/workflows/lfs.yml@main
    with:
      key: ${{ needs.config.outputs.lfs-key }}

  test:
    name: ${{ fromJson('''Test''') }}
    needs: prime-lfs-cache
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc, aarch64-apple-darwin, x86_64-unknown-linux-gnu]
    uses: xStrom/ci-test/.github/workflows/test.yml@main
    with:
      target: ${{ matrix.target }}

  # msrv:
  #   name: ${{ fromJson('''MSRV''') }}
  #   strategy:
  #     matrix:
  #       target: [x86_64-pc-windows-msvc, aarch64-apple-darwin, x86_64-unknown-linux-gnu]
  #   uses: xStrom/ci-test/.github/workflows/msrv.yml@main
  #   with:
  #     target: ${{ matrix.target }}

  # docs:
  #   name: ${{ fromJson('''Docs''') }}
  #   strategy:
  #     matrix:
  #       target: [x86_64-pc-windows-msvc, aarch64-apple-darwin, x86_64-unknown-linux-gnu]
  #   uses: xStrom/ci-test/.github/workflows/docs.yml@main
  #   with:
  #     target: ${{ matrix.target }}
