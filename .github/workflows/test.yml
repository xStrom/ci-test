name: Test

on:
  workflow_call:
    inputs:
      # Basic inputs
      target:
        type: string
        required: true
      exclude:
        type: string
        required: false
        default: ""
      dependencies:
        type: string
        required: false
        default: ""
      lfs-key:
        type: string
        required: false
        default: ""
      failed-artifacts:
        type: string
        required: false
        default: ""
      # Advanced inputs
      names:
        type: string
        required: false
        default: >
          {
            "x86_64-pc-windows-msvc":     "Windows x64",
            "aarch64-pc-windows-msvc":    "Windows ARM64",

            "x86_64-apple-darwin":        "macOS x64",
            "aarch64-apple-darwin":       "macOS ARM64",

            "x86_64-unknown-linux-gnu":   "Linux x64",
            "aarch64-unknown-linux-gnu":  "Linux ARM64",

            "x86_64-linux-android":       "Android x64",
            "aarch64-linux-android":      "Android ARM64",
            "armv7-linux-androideabi":    "Android ARMv7",

            "x86_64-apple-ios":           "iOS x64",
            "aarch64-apple-ios":          "iOS ARM64",

            "wasm32-unknown-unknown":     "Wasm"
          }
      oses:
        type: string
        required: false
        default: >
          {
            "x86_64-pc-windows-msvc":     "windows-latest",
            "aarch64-pc-windows-msvc":    "windows-latest",

            "x86_64-apple-darwin":        "macos-latest",
            "aarch64-apple-darwin":       "macos-latest",

            "x86_64-unknown-linux-gnu":   "ubuntu-latest",
            "aarch64-unknown-linux-gnu":  "ubuntu-latest",

            "x86_64-linux-android":       "ubuntu-latest",
            "aarch64-linux-android":      "ubuntu-latest",
            "armv7-linux-androideabi":    "ubuntu-latest",

            "x86_64-apple-ios":           "macos-latest",
            "aarch64-apple-ios":          "macos-latest",

            "wasm32-unknown-unknown":     "ubuntu-latest"
          }
      runnable:
        type: string
        required: false
        default: >
          {
            "x86_64-pc-windows-msvc":     true,
            "aarch64-pc-windows-msvc":    false,

            "x86_64-apple-darwin":        true,
            "aarch64-apple-darwin":       true,

            "x86_64-unknown-linux-gnu":   true,
            "aarch64-unknown-linux-gnu":  false,

            "x86_64-linux-android":       false,
            "aarch64-linux-android":      false,
            "armv7-linux-androideabi":    false,

            "x86_64-apple-ios":           false,
            "aarch64-apple-ios":          false,

            "wasm32-unknown-unknown":     false
          }

jobs:
  test:
    name: ${{ fromJson(inputs.names)[inputs.target] }}
    runs-on: ${{ fromJson(inputs.oses)[inputs.target] }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Process inputs
        run: |
          # Process inputs
          exclude='${{ inputs.exclude }}'
          exclude_args=()
          for pkg in $exclude; do
            exclude_args+=('--exclude' "$pkg")
          done
          echo "EXCLUDE_ARGS=${exclude_args[*]}" | tee -a $GITHUB_ENV

      # We intentionally do not use lfs: true here, instead using the caching method to save LFS bandwidth.
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore LFS cache
        id: lfs-cache
        if: inputs.lfs-key != '' && fromJson(inputs.runnable)[inputs.target]
        uses: actions/cache/restore@v4
        with:
          path: .git/lfs
          key: ${{ inputs.lfs-key }}
          enableCrossOsArchive: true

      - name: Checkout LFS files
        if: inputs.lfs-key != '' && fromJson(inputs.runnable)[inputs.target]
        continue-on-error: true
        run: git lfs checkout

      - name: Determine Rust versions
        id: versions
        uses: xStrom/ci-test/versions@main

      - name: Install Rust ${{ steps.versions.outputs.rust-stable }}
        uses: dtolnay/rust-toolchain@master
        with:
          #toolchain: ${{ steps.versions.outputs.rust-stable }}
          toolchain: nightly-2024-10-15
          targets: ${{ inputs.target }}

      - name: Install cargo-nextest
        if: fromJson(inputs.runnable)[inputs.target]
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Install dependencies
        if: inputs.dependencies != '' && !startsWith(inputs.dependencies, 'false')
        run: |
          # Install dependencies
          ${{ inputs.dependencies }}

      - name: Restore cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ inputs.target }}
          save-if: ${{ github.event_name != 'merge_group' }}

      - name: Run cargo nextest
        if: fromJson(inputs.runnable)[inputs.target]
        run: cargo nextest run --workspace $EXCLUDE_ARGS --locked --cargo-profile ci --target ${{ inputs.target }} --all-features --no-fail-fast

      - name: Run cargo test --doc
        if: fromJson(inputs.runnable)[inputs.target]
        run: cargo test --doc --workspace $EXCLUDE_ARGS --locked --profile ci --target ${{ inputs.target }} --all-features --no-fail-fast --verbose

      - name: Run cargo test (compile only)
        if: fromJson(inputs.runnable)[inputs.target] == false
        run: cargo test --workspace $EXCLUDE_ARGS --locked --profile ci --target ${{ inputs.target }} --all-features -Zdoctest-xcompile --config 'target.${{ inputs.target }}.runner = "true"' --config 'target.${{ inputs.target }}.linker = "true"' --verbose

      - name: Upload failing test results
        if: failure() && inputs.failed-artifacts != '' && fromJson(inputs.runnable)[inputs.target]
        uses: actions/upload-artifact@v4
        with:
          name: failed-tests-${{ inputs.target }}-${{ github.run_number }}
          path: ${{ inputs.failed-artifacts }}
